<!doctype html>
<html data-wf-page="68a85f767a090afb436f9102" data-wf-site="6888d102d478b2446d70b62e" lang="{{ request.locale.iso_code }}">
<head>
  <meta charset="utf-8">
  <title>{{ shop.name }} – Culture</title>
  <meta content="{{ page_description }}" name="description">
  <meta content="{{ shop.name }} – Culture" property="og:title">
  <meta content="{{ page_description }}" property="og:description">
  <meta content="{{ shop.name }} – Culture" property="twitter:title">
  <meta content="{{ page_description }}" property="twitter:description">
  <meta property="og:type" content="website">
  <meta content="summary_large_image" name="twitter:card">
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <meta content="Webflow" name="generator">
  <link href="{{ 'normalize.css' | asset_url }}" rel="stylesheet" type="text/css">
  <link href="{{ 'webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
  <link href="{{ 'adult-attire.webflow.css' | asset_url }}" rel="stylesheet" type="text/css">
  <script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script>
  
            {% if settings.favicon == blank %}
              <link href="{{ 'favicon.png' | asset_url }}" rel="shortcut icon" type="image/x-icon">
            {% else %}
              <link rel="shortcut icon" type="image/png" href="{{ settings.favicon | img_url: '32x32' }}">
            {% endif %}
        
  
            {% if settings.apple_touch_icon == blank %}
              <link href="{{ 'webclip.png' | asset_url }}" rel="apple-touch-icon">
            {% else %}
              <link rel="apple-touch-icon" type="image/png" href="{{ settings.apple_touch_icon | img_url: '32x32' }}">
            {% endif %}
        
  <style>
/* Prevent underline FOUC on initial paint */
.menu-spacer.center .main-nav_link-list { position: relative; }
.menu-spacer.center .main-nav_link-list .menu-underline{
  visibility: hidden !important; /* keep geometry measurable */
  pointer-events: none !important;
}
</style>
  <!--  Alpine Focus Plugin  -->
  <script defer="" src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
  <!--  Alpine JS  -->
  <script defer="" src="{{ 'alpinejs3.js' | asset_url }}"></script>
  <!--  Liquify Pro Debugger  -->
  <script defer="" auto="" min="" src="https://cdn.jsdelivr.net/gh/liquify-pro/core@latest/script.js"></script>
  <link href="{{ canonical_url }}" rel="canonical">
  {% if page_image %}
  <meta property="og:image" content="http:{{ page_image | image_url }}">
  <meta property="og:image:secure_url" content="https:{{ page_image | image_url }}">
  <meta property="og:image:width" content="{{ page_image.width }}">
  <meta property="og:image:height" content="{{ page_image.height }}">
{% endif %}
  {% case template.name %}
  {% when product %}
<script type="application/ld+json">
  {{ product | structured_data }}
</script>
{% when article %}
<script type="application/ld+json">
  {{ article | structured_data }}
</script>
{% when collection %}
<script type="application/ld+json">
                  {
                     "@context":"http:\/\/schema.org",
                     "@type":"WebPage",
                     "url":"{{ shop.url }}",
                     "mainEntity":{"@type":"offerCatalog",
                     "name": "{{ collection.title }}",
                     "url": "{{ collection.url }}",
                     "numberOfItems":{{ collection.products.size }}}
              }
</script>
{% endcase %}
{% assign min_price = null %}
{% assign max_price = 0 %}
{% for product in collections.all-products.products %}
  {% for variant in product.variants %}
    {% assign price = variant.price | money_without_currency | replace: ',', '.' | plus: 0 %}
    {% if min_price == null or price < min_price %}
      {% assign min_price = price %}
    {% endif %}
    {% if price > max_price %}
      {% assign max_price = price %}
    {% endif %}
  {% endfor %}
{% endfor %}
    <script type="application/ld+json">
      {
        "@context" : "https://schema.org",
        "@type" : "LocalBusiness",
        "mainEntityOfPage" : {
          "@type" : "WebPage",
          "@id" : "{{ shop.url }}"
        },
        "name" : "{{ shop.name }}",
        "telephone" : "{{ shop.phone }}",
        "email" : "{{ shop.email }}",
        "priceRange" : "{{ min_price | money }} - {{ max_price | money }}",
        "address" : {
          "@type" : "PostalAddress",
          "streetAddress" : "{{ shop.address.address1 }}",
          "addressLocality" : "{{ shop.address.city }}",
          "addressRegion" : "{{ shop.address.province }}",
          "addressCountry" : "{{ shop.address.country_code }}",
          "postalCode" : "{{ shop.address.zip }}"
        },
        "url" : "{{ shop.url }}"
      }
    </script>
  <style>
  /* AlpineJS can cause a brief &ldquo;blip&rdquo; where uninitialized templates flash before it loads. x-cloak prevents this by hiding elements until Alpine is ready. Learn more: https://alpinejs.dev/directives/cloak */
  [x-cloak] { display: none !important; }
  /* The li-cloak tag is removed during conversion. It&rsquo;s useful for hiding elements in the Webflow Designer to make editing easier. Learn more: https://www.liquify.pro/docu/getting-started#li-cloak */  
  [li-cloak_disabled] { display: none !important; }
  /* Setup Font and Background Color if Text is selected */
  ::selection {
    color: #FFFFFF;
    background: #000000;
  }
  ::-moz-selection {
    color: #FFFFFF;
    background: #000000;
  }
</style>
  <style>
html.lenis {
  height: auto;
}
.lenis.lenis-smooth {
  scroll-behavior: auto;
}
.lenis.lenis-smooth [data-lenis-prevent] {
  overscroll-behavior: contain;
}
.lenis.lenis-stopped {
  overflow: hidden;
}  
</style>
  <style>
.form_input:-webkit-autofill {
    background-color: transparent !important;
    border-radius: 0rem;
}
input:-webkit-autofill {
    background-color: transparent !important;
	border-radius: 0rem;
}
input:-webkit-autofill {
  -webkit-box-shadow: inset 0 0 0px 9999px var(--_adult---adult-off-white);
-webkit-text-fill-color: var(--_adult---adult-red) !important;
}
</style>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <style>
html.shopify-design-mode .shopify-section.logo-wrapper { 
    display: none !important;
  }
</style>
  <style>
  *[tabindex]:focus-visible, input[type="file"]:focus-visible {
    outline: none;
    outline-offset: 0.125rem;
}
</style>
  <!--  
IMPORTANT: If you want to make changes to the head or body code on this page, 
please remove the `li-layout` tag from the body element. 
This will create a separate layout file for this page, allowing you to apply custom modifications.
Learn more: https://www.liquify.pro/docu/getting-started#template-structure
 -->
<script src="{{ 'li_helper.js' | asset_url }}" type="text/javascript"></script>{{ content_for_header }}</head>
<body li-layout="culture">
  <div class="page-wrapper">
    {% render 'global_styles' %}
    {% sections 'header_group' %}
    {{ content_for_layout }}
  </div>
  <script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=6888d102d478b2446d70b62e" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <script src="{{ 'webflow.js' | asset_url }}" type="text/javascript"></script>
  <script src="https://cdn.prod.website-files.com/gsap/3.13.0/gsap.min.js" type="text/javascript"></script>
  {% render 'search_javascript' %}
  <script src="https://unpkg.com/@studio-freight/lenis@1.0.36/dist/lenis.min.js"></script>
  <script>
// LENIS SMOOTH SCROLL
let lenis;
if (Webflow.env("editor") === undefined) {
  lenis = new Lenis({
    lerp: 0.8,
    wheelMultiplier: 1,
    gestureOrientation: "vertical",
    normalizeWheel: false,
    smoothTouch: false
  });
  function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }
  requestAnimationFrame(raf);
}
$("[data-lenis-start]").on("click", function () {
  lenis.start();
});
$("[data-lenis-stop]").on("click", function () {
  lenis.stop();
});
$("[data-lenis-toggle]").on("click", function () {
  $(this).toggleClass("stop-scroll");
  if ($(this).hasClass("stop-scroll")) {
    lenis.stop();
  } else {
    lenis.start();
  }
});
</script>
  <script>
function initDynamicCurrentYear() {  
  const currentYear = new Date().getFullYear();
  const currentYearElements = document.querySelectorAll('[data-current-year]');
  currentYearElements.forEach(currentYearElement => {
    currentYearElement.textContent = currentYear;
  });
}
// Initialize Dynamic Current Year
document.addEventListener('DOMContentLoaded', () => {
  initDynamicCurrentYear();
});
</script>
  <script>
document.querySelectorAll('.modal-button').forEach(button => {
  button.addEventListener('click', () => {
    const plus = button.querySelector('.plus');
    const modal = button.nextElementSibling;
    if (!plus || !modal || !modal.classList.contains('modal')) return;
    const isOpen = modal.classList.contains('open');
    // Toggle +/-
    plus.textContent = isOpen ? '+' : '-';
    // Toggle .open class
    modal.classList.toggle('open');
    // Remove leftover inline styles if closing
    if (isOpen) {
      modal.removeAttribute('style');
    }
  });
});
</script>
  <script>
/**
 * Mini-cart plural fixer
 * - Handles multiple instances under the same parent
 * - Updates on Alpine's `carttotalitems` window event
 * - Re-inits on Swup navigations (v2 + v3)
 * - Cleans up observers to avoid leaks/duplicates
 */
// If re-injected (e.g., via Swup), tear down previous run
if (window.__pluralFix && window.__pluralFix.teardown) window.__pluralFix.teardown();
(function () {
  const state = { observers: [], pairs: [], handler: null, swup2: null, swup3: null };
  function getCount(el) {
    const m = (el.textContent || '').match(/\d+/);
    return m ? parseInt(m[0], 10) : 0;
  }
  function setPluralDisplay(pluralEl, hide) {
    if (!pluralEl) return;
    if (hide) {
      pluralEl.style.display = 'none';
    } else {
      // Let CSS decide when not singular
      pluralEl.style.removeProperty('display');
    }
  }
  function updatePair(countEl, pluralEl) {
    const n = getCount(countEl);
    setPluralDisplay(pluralEl, n === 1);
  }
  // Pair each count with the nearest following sibling that contains .cart-plural
  function makePairs(root) {
    const pairs = [];
    const counts = root.querySelectorAll('[li-element="mini-cart-item-count"]');
    counts.forEach((countEl) => {
      let pluralEl = null;
      // Walk forward through siblings until we find a .cart-plural
      let sib = countEl.nextElementSibling;
      while (sib && !pluralEl) {
        const found = sib.querySelector && sib.querySelector('.cart-plural');
        if (found) pluralEl = found;
        sib = found ? null : sib.nextElementSibling;
      }
      // Fallback: any .cart-plural after the count within the same parent
      if (!pluralEl && countEl.parentElement) {
        const plurals = Array.from(countEl.parentElement.querySelectorAll('.cart-plural'));
        pluralEl = plurals.find(pl => (pl.compareDocumentPosition(countEl) & Node.DOCUMENT_POSITION_PRECEDING) !== 0) || null;
      }
      if (pluralEl) pairs.push({ countEl, pluralEl });
    });
    return pairs;
  }
  function observePair(countEl, pluralEl) {
    const mo = new MutationObserver(() => updatePair(countEl, pluralEl));
    mo.observe(countEl, { childList: true, characterData: true, subtree: true });
    state.observers.push(mo);
  }
  function disconnectAll() {
    state.observers.forEach(o => o.disconnect());
    state.observers = [];
  }
  function init(root = document) {
    disconnectAll();
    state.pairs = makePairs(root);
    if (!state.pairs.length) return;
    state.pairs.forEach(({ countEl, pluralEl }) => {
      updatePair(countEl, pluralEl);
      observePair(countEl, pluralEl);
    });
    // Recalculate after Alpine dispatches carttotalitems (x-text update happens first)
    if (!state.handler) {
      state.handler = () => setTimeout(() => {
        state.pairs.forEach(({ countEl, pluralEl }) => updatePair(countEl, pluralEl));
      }, 0);
      window.addEventListener('carttotalitems', state.handler, { passive: true });
    }
  }
  function refresh() {
    disconnectAll();
    state.pairs = makePairs(document);
    state.pairs.forEach(({ countEl, pluralEl }) => {
      updatePair(countEl, pluralEl);
      observePair(countEl, pluralEl);
    });
  }
  function teardown() {
    disconnectAll();
    if (state.handler) window.removeEventListener('carttotalitems', state.handler);
    state.handler = null;
    // Remove Swup hooks
    if (state.swup2) document.removeEventListener('swup:contentReplaced', state.swup2);
    if (state.swup3) document.removeEventListener('swup:page:view', state.swup3);
    state.swup2 = state.swup3 = null;
    state.pairs = [];
  }
  // Expose debug helpers if you need them
  window.__pluralFix = { refresh, teardown };
  // Init now
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => init(document));
  } else {
    init(document);
  }
  // Swup (v2 + v3): re-init after page changes
  state.swup2 = () => init(document);
  state.swup3 = () => init(document);
  document.addEventListener('swup:contentReplaced', state.swup2); // v2
  document.addEventListener('swup:page:view',       state.swup3); // v3
})();
</script>
  <script>
  document.addEventListener("DOMContentLoaded", () => {
    const openTrigger = document.querySelector("#openLogin");
    const closeTrigger = document.querySelector("#closeLogin");
    const target = document.querySelector(".section_under-construction");
    if (openTrigger && target) {
      openTrigger.addEventListener("click", (e) => {
        e.preventDefault();
        target.classList.add("open");
      });
    }
    if (closeTrigger && target) {
      closeTrigger.addEventListener("click", (e) => {
        e.preventDefault();
        target.classList.remove("open");
      });
    }
  });
</script>
  <script>
document.addEventListener('DOMContentLoaded', () => {
  // Elements
  const body = document.body;
  const mobileBg = document.querySelector('.mobile-menu-background');
  const mobileAboutBg = document.querySelector('.mobile-about-background');
  const cartDropdown = document.querySelector('.nav_mini-cart-holder.w-dropdown-list'); // list
  const aboutWrapper = document.querySelector('.about_component-wrapper');
  const aboutBtn = document.getElementById('aboutBtn');
  const closeBtn = document.getElementById('closeAbout');
  const modalBg = document.getElementById('bgcloseAbout');
  const backBtn = document.getElementById('backAbout'); // NEW
  // Early exit if core pieces are missing
  if (!cartDropdown || !aboutWrapper) return;
  // Cart root/toggle (for reliably closing Webflow dropdown)
  const cartRoot = cartDropdown.closest('.w-dropdown') || cartDropdown.parentElement;
  const cartToggle = cartRoot ? cartRoot.querySelector('.w-dropdown-toggle') : null;
  // --- Cart helpers ---
  function isCartOpen() {
    return cartDropdown.classList.contains('w--open');
  }
  function closeCart() {
    cartDropdown.classList.remove('w--open');
    cartToggle?.classList.remove('w--open');
    cartToggle?.setAttribute('aria-expanded', 'false');
  }
  // --- About controls (toggle + close helpers) ---
  function openAbout() {
    // Mutual exclusivity: close cart if it's open
    if (isCartOpen()) closeCart();
    aboutWrapper.classList.add('open');
    aboutBtn?.setAttribute('aria-expanded', 'true');
    updateState();
  }
  function closeAbout() {
    aboutWrapper.classList.remove('open');
    aboutBtn?.setAttribute('aria-expanded', 'false');
    updateState();
  }
  function toggleAbout() {
    if (aboutWrapper.classList.contains('open')) closeAbout(); else openAbout();
  }
  // Events for About
  aboutBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    toggleAbout();
  });
  closeBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    closeAbout();
  });
  backBtn?.addEventListener('click', (e) => { // NEW
    e.preventDefault();
    closeAbout();
  });
  modalBg?.addEventListener('click', () => {
    closeAbout();
  });
  // --- ESC key support for About modal ---
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' || e.key === 'Esc') {
      if (aboutWrapper.classList.contains('open')) {
        closeAbout();
      }
    }
  });
  // --- Mobile background updaters ---
  function updateMobileBg() {
    if (!mobileBg) return;
    if (window.innerWidth < 767 && isCartOpen()) {
      mobileBg.classList.add('open');
    } else {
      mobileBg.classList.remove('open');
    }
  }
  function updateMobileAboutBg() {
    if (!mobileAboutBg) return;
    if (aboutWrapper.classList.contains('open')) {
      mobileAboutBg.classList.add('open');
    } else {
      mobileAboutBg.classList.remove('open');
    }
  }
  // --- Central state updater (no body lock) ---
  function updateState() {
    // If cart opens, ensure About closes
    if (isCartOpen()) {
      aboutWrapper.classList.remove('open');
      aboutBtn?.setAttribute('aria-expanded', 'false');
      mobileAboutBg?.classList.remove('open');
    }
    // Maintain backgrounds (scroll remains enabled)
    updateMobileBg();
    updateMobileAboutBg();
    // Clean up any legacy lock remnants if present
    body.classList.remove('_lock');
    body.style.top = '';
  }
  // Observe cart open/close (class changes from Webflow)
  const observer = new MutationObserver(updateState);
  observer.observe(cartDropdown, { attributes: true, attributeFilter: ['class'] });
  // Keep things consistent on resize
  window.addEventListener('resize', updateState);
  // Initial sync
  updateState();
});
</script>
  <script>
(function () {
  // Forms from your markup (no HTML edits required)
  const contactForm = document.querySelector('.contact-form-wrapper')?.closest('form');
  const newsletterForm = document.querySelector('.footer_form')?.closest('form');
  // Remove duplicate id="contact_form" if both forms have it (prevents anchor collisions)
  (function fixDuplicateContactId() {
    if (!contactForm || !newsletterForm) return;
    if (contactForm.id === 'contact_form' && newsletterForm.id === 'contact_form') {
      newsletterForm.removeAttribute('id');
    }
  })();
  // Auto-tag
  if (contactForm && !contactForm.dataset.formKey) contactForm.dataset.formKey = 'contact';
  if (newsletterForm && !newsletterForm.dataset.formKey) newsletterForm.dataset.formKey = 'newsletter';
  const STORAGE_LAST_FORM = 'lastSubmittedFormKey';
  const STORAGE_SCROLL = 'scrollPosition';
  function attachSubmitTracker(form) {
    if (!form) return;
    form.addEventListener('submit', () => {
      try {
        sessionStorage.setItem(STORAGE_LAST_FORM, form.dataset.formKey || '');
        sessionStorage.setItem(STORAGE_SCROLL, String(window.scrollY || 0));
      } catch (e) {}
      // Make hashes unique per form to avoid jumping to the wrong block
      try {
        const u = new URL(form.action, location.origin);
        if (form.dataset.formKey === 'newsletter') u.hash = '#newsletter_success';
        if (form.dataset.formKey === 'contact')    u.hash = '#contact_success';
        form.action = u.pathname + u.search + u.hash;
      } catch (e) {}
    });
  }
  attachSubmitTracker(contactForm);
  attachSubmitTracker(newsletterForm);
  // Accept BOTH Shopify variants
  function hasPosted() {
    const params = new URLSearchParams(location.search);
    return params.get('customer_posted') === 'true' || params.get('contact_posted') === 'true';
  }
  function flipContactSuccess() {
    const initial = document.querySelector('.contact-form-wrapper');
    const success = document.querySelector('.contact-form-succes-state');
    if (initial) initial.classList.add('succes');
    if (success) success.classList.add('succes');
  }
  function flipNewsletterSuccess() {
    const success = document.querySelector('.footer-form-succes-state');
    if (success) success.classList.add('succes');
    const gated = document.querySelectorAll('[hs-newsletter-show]');
    gated.forEach(el => (el.style.display = 'flex'));
  }
  function restoreScrollIfSaved() {
    try {
      const saved = sessionStorage.getItem(STORAGE_SCROLL);
      if (saved) {
        window.scrollTo(0, parseInt(saved, 10) || 0);
        sessionStorage.removeItem(STORAGE_SCROLL);
      }
    } catch (e) {}
  }
  function init() {
    if (!hasPosted()) return;
    // IMPORTANT: capture hash BEFORE removing it
    const incomingHash = location.hash;
    // Decide which form succeeded
    let key = null;
    try { key = sessionStorage.getItem(STORAGE_LAST_FORM); } catch (e) {}
    if (!key) {
      if (incomingHash === '#newsletter_success') key = 'newsletter';
      if (incomingHash === '#contact_success' || incomingHash === '#contact_form') key = 'contact';
    }
    // Flip the correct UI
    if (key === 'contact') flipContactSuccess();
    else if (key === 'newsletter') flipNewsletterSuccess();
    // Now safely strip the hash to prevent browser jump
    if (location.hash) {
      history.replaceState(null, '', location.pathname + location.search);
    }
    restoreScrollIfSaved();
    // Clean marker so refresh doesn't re-trigger
    try { sessionStorage.removeItem(STORAGE_LAST_FORM); } catch (e) {}
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  // Always keep last scroll before navigating away
  window.addEventListener('beforeunload', function () {
    try { sessionStorage.setItem(STORAGE_SCROLL, String(window.scrollY || 0)); } catch (e) {}
  });
})();
</script>
  <script>
document.addEventListener('DOMContentLoaded', () => {
  const first2c = document.querySelector('._2c');
  if (first2c) {
    first2c.classList.add('first-2c');
  }
});
</script>
  <script>
document.addEventListener('DOMContentLoaded', function () {
  // Only run on product pages
  if (!/\/products\//.test(location.pathname)) return;
  const trigger = document.querySelector('.viewport-trigger');
  const stickyTarget = document.querySelector('.product-header_component');
  const mediaList = document.querySelector('.product-media-list');
  if (!trigger || !stickyTarget || !mediaList) return;
  const io = new IntersectionObserver((entries) => {
    const entry = entries[0];
    if (entry && entry.isIntersecting) {
      stickyTarget.classList.add('sticky');
      mediaList.classList.add('remove-margin');
    } else if (entry && entry.boundingClientRect.top > 0) {
      stickyTarget.classList.remove('sticky');
      mediaList.classList.remove('remove-margin');
    }
  }, { threshold: 0 });
  io.observe(trigger);
});
</script>
  <script>
(() => {
  const CONTAINER_SEL = '.menu-spacer.center .main-nav_link-list';
  const LINK_SEL      = 'a.menu_link.w-inline-block';
  const LINE_SEL      = '.menu-underline';
  const DURATION_MS   = 380;
  const EASE          = 'cubic-bezier(0.25, 0.1, 0.25, 1)';
  const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));
  const relBox = (el, container) => {
    const a = el.getBoundingClientRect(), b = container.getBoundingClientRect();
    return { left: a.left - b.left, top: a.top - b.top, width: a.width };
  };
  const pickActive = (links) => {
    const viaCurrent = links.find(a => a.classList.contains('w--current'));
    if (viaCurrent) return viaCurrent;
    const p = (location.pathname || '').toLowerCase();
    if (p.startsWith('/products/')) {
      return links.find(a => (a.textContent || '').trim().toLowerCase() === 'shop')
          || links.find(a => ((a.getAttribute('href') || '').toLowerCase()).includes('/collections'))
          || links[0];
    }
    return links[0] || null;
  };
  function initOne(container){
    if (!container || container.dataset.kbUnderlineInit === '1') return;
    container.dataset.kbUnderlineInit = '1';
    if (getComputedStyle(container).position === 'static') container.style.position = 'relative';
    const links = $$(LINK_SEL, container);
    if (!links.length) return;
    // Find any built-in line to copy style and baseline
    const refLine = container.querySelector(LINE_SEL);
    if (!refLine) return;
    // Create the mover line once
    let mover = container.querySelector(':scope > .kb-nav-underline');
    if (!mover) {
      mover = document.createElement('div');
      mover.className = 'kb-nav-underline';
      container.appendChild(mover);
    }
    const rs = getComputedStyle(refLine);
    Object.assign(mover.style, {
      position: 'absolute',
      left: '0',
      // top will be set after baseline is computed
      height: rs.height || '2px',
      borderRadius: rs.borderRadius || '',
      background: rs.background || rs.backgroundColor || 'currentColor',
      willChange: 'transform,width',
      transition: `transform ${DURATION_MS}ms ${EASE}, width ${DURATION_MS}ms ${EASE}`,
      transformOrigin: '0 0',
      pointerEvents: 'none',
      zIndex: '10'
    });
    // Only X should change, so compute and set a fixed baseline Y
    let baselineTop = 0;
    const computeBaseline = () => {
      baselineTop = Math.round(relBox(refLine, container).top);
      mover.style.top = baselineTop + 'px';
    };
    computeBaseline();
    // Helper: where to place the mover for a given anchor (LEFT + WIDTH only)
    const targetFor = (a) => {
      const line = a.querySelector(LINE_SEL);
      if (line) {
        const b = relBox(line, container);
        return { left: b.left, width: b.width };
      }
      const t = a.querySelector('.menu-item-text') || a;
      const b = relBox(t, container);
      return { left: b.left, width: b.width };
    };
    const placeInstant = (x, w) => {
      const prev = mover.style.transition;
      mover.style.transition = 'none';
      mover.style.transform  = `translate3d(${Math.round(x)}px,0,0)`; // Y locked to 0 (top is fixed)
      mover.style.width      = `${Math.round(Math.max(0, w))}px`;
      void mover.offsetWidth;
      mover.style.transition  = prev || `transform ${DURATION_MS}ms ${EASE}, width ${DURATION_MS}ms ${EASE}`;
    };
    const animateTo = (x, w) => {
      requestAnimationFrame(() => {
        mover.style.transform = `translate3d(${Math.round(x)}px,0,0)`; // X only
        mover.style.width     = `${Math.round(Math.max(0, w))}px`;
      });
    };
    const snapToActive = () => {
      const a = pickActive(links);
      const t = targetFor(a);
      placeInstant(t.left, t.width);
    };
    // Initial snap
    snapToActive();
    // Hover/focus &rarr; move horizontally only
    const toAnchor = (a) => { const t = targetFor(a); animateTo(t.left, t.width); };
    const backToActive = () => { const a = pickActive(links); const t = targetFor(a); animateTo(t.left, t.width); };
    container.addEventListener('mouseover', (e) => {
      const a = e.target.closest && e.target.closest(LINK_SEL);
      if (a && container.contains(a)) toAnchor(a);
    });
    container.addEventListener('mouseout', (e) => {
      if (!container.contains(e.relatedTarget)) backToActive();
    });
    links.forEach(a => {
      a.addEventListener('focus', () => toAnchor(a));
      a.addEventListener('blur',  backToActive);
    });
    // Recompute baseline and resnap on layout changes
    const recalc = () => { computeBaseline(); snapToActive(); };
    window.addEventListener('resize', recalc);
    window.addEventListener('load', recalc);
    if (document.fonts && document.fonts.ready) document.fonts.ready.then(recalc);
  }
  function boot(){
    $$(CONTAINER_SEL).forEach(initOne);
    // In case markup re-renders (Shopify/Alpine), re-init containers
    const mo = new MutationObserver(() => $$(CONTAINER_SEL).forEach(initOne));
    mo.observe(document.documentElement, { childList: true, subtree: true });
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', boot, { once:true });
  } else {
    boot();
  }
})();
</script>
  <script src="{{ 'seq-stack.js' | asset_url }}" defer=""></script>
</body>
</html>